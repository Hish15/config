"use strict";
/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const process = require("process");
const tunnel = require('tunnel');
const followRedirects = require("follow-redirects");
const unzip = require("extract-zip");
const rimraf = require("rimraf");
var OperatingSystem;
(function (OperatingSystem) {
    OperatingSystem[OperatingSystem["Unknown"] = 0] = "Unknown";
    OperatingSystem[OperatingSystem["Windows"] = 1] = "Windows";
    OperatingSystem[OperatingSystem["MacOS"] = 2] = "MacOS";
    OperatingSystem[OperatingSystem["Linux"] = 3] = "Linux";
})(OperatingSystem = exports.OperatingSystem || (exports.OperatingSystem = {}));
function getPlatformDetails() {
    let operatingSystem = OperatingSystem.Unknown;
    if (process.platform === "win32") {
        operatingSystem = OperatingSystem.Windows;
    }
    else if (process.platform === "darwin") {
        operatingSystem = OperatingSystem.MacOS;
    }
    else if (process.platform === "linux") {
        operatingSystem = OperatingSystem.Linux;
    }
    const isProcess64Bit = process.arch === "x64";
    return {
        operatingSystem,
        isOS64Bit: isProcess64Bit || process.env.hasOwnProperty("PROCESSOR_ARCHITEW6432"),
        isProcess64Bit,
    };
}
exports.getPlatformDetails = getPlatformDetails;
exports.currentPlatform = getPlatformDetails();
exports.omnisharpDirectory = path.join(__dirname, "..", "..", "omnisharp");
exports.omnisharpRunScript = path.join(exports.omnisharpDirectory, "run");
const omnisharpZip = exports.omnisharpDirectory + ".zip";
const URL_Windows = "https://github.com/OmniSharp/omnisharp-roslyn/releases/download/RELEASE/omnisharp-win-x64.zip";
const URL_Osx = "https://github.com/OmniSharp/omnisharp-roslyn/releases/download/RELEASE/omnisharp-osx.zip";
const URL_Linux = "https://github.com/OmniSharp/omnisharp-roslyn/releases/download/RELEASE/omnisharp-linux-x64.zip";
exports.omnisharpExe = (() => {
    if (exports.currentPlatform.operatingSystem === OperatingSystem.Windows)
        return path.join(exports.omnisharpDirectory, "OmniSharp.exe");
    else
        return path.join(exports.omnisharpDirectory, "omnisharp", "OmniSharp.exe");
})();
function downloadOmnisharp() {
    return __awaiter(this, void 0, void 0, function* () {
        if (fs.existsSync(exports.omnisharpDirectory)) {
            rimraf.sync(exports.omnisharpDirectory);
        }
        let url = (() => {
            switch (exports.currentPlatform.operatingSystem) {
                case OperatingSystem.Windows: return URL_Windows;
                case OperatingSystem.Linux: return URL_Linux;
                case OperatingSystem.MacOS: return URL_Osx;
                default: throw "Unsupported operating system";
            }
        })().replace("RELEASE", "v1.34.0");
        fs.mkdirSync(exports.omnisharpDirectory);
        yield new Promise((resolve, reject) => {
            const req = followRedirects.https.request(url, (res) => {
                if (res.statusCode != 200) {
                    reject(new Error(`Invalid response from ${url}: ${res.statusCode}`));
                    return;
                }
                let file = fs.createWriteStream(omnisharpZip);
                let stream = res.pipe(file);
                stream.on('finish', resolve);
            });
            req.on('error', reject);
            req.end();
        });
        yield new Promise((resolve, reject) => {
            unzip(omnisharpZip, { dir: exports.omnisharpDirectory }, (err) => {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
        fs.unlinkSync(omnisharpZip);
    });
}
exports.downloadOmnisharp = downloadOmnisharp;
//# sourceMappingURL=platform.js.map