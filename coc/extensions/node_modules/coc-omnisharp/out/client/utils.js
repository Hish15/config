/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const coc_nvim_1 = require("coc.nvim");
function fileURLToPath(x) {
    return coc_nvim_1.Uri.parse(x).fsPath;
}
exports.fileURLToPath = fileURLToPath;
function sleep(ms) {
    return new Promise((resolve, __) => setTimeout(resolve, ms));
}
exports.sleep = sleep;
function ensurePathExists(targetPath) {
    // Ensure that the path exists
    try {
        fs.mkdirSync(targetPath);
    }
    catch (e) {
        // If the exception isn't to indicate that the folder exists already, rethrow it.
        if (e.code !== "EEXIST") {
            throw e;
        }
    }
}
exports.ensurePathExists = ensurePathExists;
function getPipePath(pipeName) {
    if (os.platform() === "win32") {
        return "\\\\.\\pipe\\" + pipeName;
    }
    else {
        // Windows uses NamedPipes where non-Windows platforms use Unix Domain Sockets.
        // This requires connecting to the pipe file in different locations on Windows vs non-Windows.
        return path.join(os.tmpdir(), `CoreFxPipe_${pipeName}`);
    }
}
exports.getPipePath = getPipePath;
function checkIfFileExists(filePath) {
    try {
        fs.accessSync(filePath, fs.constants.R_OK);
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.checkIfFileExists = checkIfFileExists;
function getTimestampString() {
    const time = new Date();
    return `[${time.getHours()}:${time.getMinutes()}:${time.getSeconds()}]`;
}
exports.getTimestampString = getTimestampString;
function isWindowsOS() {
    return os.platform() === "win32";
}
exports.isWindowsOS = isWindowsOS;
//# sourceMappingURL=utils.js.map