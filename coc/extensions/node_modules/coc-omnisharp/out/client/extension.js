/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const coc_nvim_1 = require("coc.nvim");
const coc_nvim_2 = require("coc.nvim");
const platform_1 = require("./platform");
const logger = coc_nvim_1.workspace.createOutputChannel("coc-omnisharp");
function getCurrentSelection(mode) {
    return __awaiter(this, void 0, void 0, function* () {
        let doc = yield coc_nvim_1.workspace.document;
        if (mode === "v" || mode === "V") {
            let [from, _] = yield doc.buffer.mark("<");
            let [to, __] = yield doc.buffer.mark(">");
            let result = [];
            for (let i = from; i <= to; ++i) {
                result.push(doc.getline(i - 1));
            }
            return result;
        }
        else if (mode === "n") {
            let line = yield coc_nvim_1.workspace.nvim.call('line', '.');
            return [doc.getline(line - 1)];
        }
        else if (mode === "i") {
            // TODO what to do in insert mode?
        }
        else if (mode === "t") {
            //TODO what to do in terminal mode?
        }
        return [];
    });
}
function activate(context) {
    return __awaiter(this, void 0, void 0, function* () {
        logger.appendLine("coc-omnisharp activated.");
        logger.appendLine(`workspace root=${coc_nvim_1.workspace.rootPath}`);
        // Options to control the language client
        let clientOptions = {
            // Register the server for C#/VB documents
            documentSelector: [{ scheme: 'file', language: 'cs' }, { scheme: 'file', language: 'vb' }],
            synchronize: {
                configurationSection: 'omnisharp',
                fileEvents: [
                    coc_nvim_1.workspace.createFileSystemWatcher('**/*.cs'),
                    coc_nvim_1.workspace.createFileSystemWatcher('**/*.csx'),
                    coc_nvim_1.workspace.createFileSystemWatcher('**/*.cake'),
                    coc_nvim_1.workspace.createFileSystemWatcher('**/*.vb')
                ]
            }
        };
        if (!fs.existsSync(platform_1.omnisharpExe)) {
            let item = coc_nvim_1.workspace.createStatusBarItem(0, { progress: true });
            item.text = "Downloading OmniSharp";
            item.show();
            yield platform_1.downloadOmnisharp();
            item.dispose();
        }
        let directRun = platform_1.omnisharpExe;
        if (platform_1.currentPlatform.operatingSystem !== platform_1.OperatingSystem.Windows) {
            fs.chmodSync(platform_1.omnisharpRunScript, '755');
            directRun = platform_1.omnisharpRunScript;
        }
        const config = coc_nvim_1.workspace.getConfiguration('omnisharp');
        const useDotnet = config.get('useDotnet', false);
        let serverOptions = useDotnet
            ? {
                command: "dotnet",
                args: [platform_1.omnisharpExe, "-lsp"],
                options: { cwd: coc_nvim_1.workspace.rootPath }
            }
            : {
                command: directRun,
                args: ["-lsp"],
                options: { cwd: coc_nvim_1.workspace.rootPath }
            };
        // Create the language client and start the client.
        let client = new coc_nvim_2.LanguageClient('cs', 'OmniSharp Language Server', serverOptions, clientOptions);
        let disposable = client.start();
        // Push the disposable to the context's subscriptions so that the 
        // client can be deactivated on extension deactivation
        context.subscriptions.push(disposable);
    });
}
exports.activate = activate;
//# sourceMappingURL=extension.js.map